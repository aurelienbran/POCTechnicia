# Docker Compose pour le système OCR Technicia
# Version: 1.0
# Date: 2 avril 2025
#
# Ce fichier permet de déployer l'ensemble de l'infrastructure 
# du système OCR Technicia avec tous ses composants.

version: '3.8'

services:
  # Service principal - API et interface web
  app:
    build:
      context: ../../
      dockerfile: deploy/docker/Dockerfile
    image: technicia/ocr-system:latest
    container_name: technicia-app
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    ports:
      - "5000:5000"
    volumes:
      - ../../:/app
      - ocr-data:/app/data
      - ocr-logs:/app/logs
    environment:
      - APP_NAME=Technicia OCR
      - ENVIRONMENT=production
      - DEBUG=False
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ocr_db
      - DB_USER=technicia
      - DB_PASSWORD=${DB_PASSWORD:-securepassword}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - SECRET_KEY=${SECRET_KEY:-changeme_in_production}
      - MAX_PARALLEL_TASKS=4
      - OCR_QUALITY_THRESHOLD=0.75
    command: gunicorn --bind 0.0.0.0:5000 --workers 4 --timeout 120 app.wsgi:app

  # Worker Celery pour le traitement des tâches OCR
  worker:
    image: technicia/ocr-system:latest
    container_name: technicia-worker
    restart: unless-stopped
    depends_on:
      - app
      - postgres
      - redis
    volumes:
      - ../../:/app
      - ocr-data:/app/data
      - ocr-logs:/app/logs
    environment:
      - APP_NAME=Technicia OCR Worker
      - ENVIRONMENT=production
      - DEBUG=False
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ocr_db
      - DB_USER=technicia
      - DB_PASSWORD=${DB_PASSWORD:-securepassword}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - SECRET_KEY=${SECRET_KEY:-changeme_in_production}
      - MAX_PARALLEL_TASKS=4
      - OCR_QUALITY_THRESHOLD=0.75
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4

  # Beat Celery pour les tâches planifiées
  beat:
    image: technicia/ocr-system:latest
    container_name: technicia-beat
    restart: unless-stopped
    depends_on:
      - app
      - redis
    volumes:
      - ../../:/app
      - ocr-data:/app/data
      - ocr-logs:/app/logs
    environment:
      - APP_NAME=Technicia OCR Beat
      - ENVIRONMENT=production
      - DEBUG=False
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    command: celery -A app.celery_app beat --loglevel=info

  # Base de données PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: technicia-postgres
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=ocr_db
      - POSTGRES_USER=technicia
      - POSTGRES_PASSWORD=${DB_PASSWORD:-securepassword}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U technicia"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour la file d'attente et le cache
  redis:
    image: redis:7-alpine
    container_name: technicia-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx comme proxy inverse
  nginx:
    image: nginx:1.23-alpine
    container_name: technicia-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus pour le monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: technicia-prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Grafana pour les tableaux de bord de monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: technicia-grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres-data:
  redis-data:
  ocr-data:
  ocr-logs:
  prometheus-data:
  grafana-data:
